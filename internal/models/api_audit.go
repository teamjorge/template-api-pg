// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// APIAudit is an object representing the database table.
type APIAudit struct {
	TS          int64       `boil:"ts" json:"ts" toml:"ts" yaml:"ts"`
	IPAddress   string      `boil:"ip_address" json:"ip_address" toml:"ip_address" yaml:"ip_address"`
	Method      string      `boil:"method" json:"method" toml:"method" yaml:"method"`
	RequestPath string      `boil:"request_path" json:"request_path" toml:"request_path" yaml:"request_path"`
	Status      int         `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserAgent   null.String `boil:"user_agent" json:"user_agent,omitempty" toml:"user_agent" yaml:"user_agent,omitempty"`

	R *apiAuditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apiAuditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var APIAuditColumns = struct {
	TS          string
	IPAddress   string
	Method      string
	RequestPath string
	Status      string
	UserAgent   string
}{
	TS:          "ts",
	IPAddress:   "ip_address",
	Method:      "method",
	RequestPath: "request_path",
	Status:      "status",
	UserAgent:   "user_agent",
}

var APIAuditTableColumns = struct {
	TS          string
	IPAddress   string
	Method      string
	RequestPath string
	Status      string
	UserAgent   string
}{
	TS:          "api_audit.ts",
	IPAddress:   "api_audit.ip_address",
	Method:      "api_audit.method",
	RequestPath: "api_audit.request_path",
	Status:      "api_audit.status",
	UserAgent:   "api_audit.user_agent",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var APIAuditWhere = struct {
	TS          whereHelperint64
	IPAddress   whereHelperstring
	Method      whereHelperstring
	RequestPath whereHelperstring
	Status      whereHelperint
	UserAgent   whereHelpernull_String
}{
	TS:          whereHelperint64{field: "\"api_audit\".\"ts\""},
	IPAddress:   whereHelperstring{field: "\"api_audit\".\"ip_address\""},
	Method:      whereHelperstring{field: "\"api_audit\".\"method\""},
	RequestPath: whereHelperstring{field: "\"api_audit\".\"request_path\""},
	Status:      whereHelperint{field: "\"api_audit\".\"status\""},
	UserAgent:   whereHelpernull_String{field: "\"api_audit\".\"user_agent\""},
}

// APIAuditRels is where relationship names are stored.
var APIAuditRels = struct {
}{}

// apiAuditR is where relationships are stored.
type apiAuditR struct {
}

// NewStruct creates a new relationship struct
func (*apiAuditR) NewStruct() *apiAuditR {
	return &apiAuditR{}
}

// apiAuditL is where Load methods for each relationship are stored.
type apiAuditL struct{}

var (
	apiAuditAllColumns            = []string{"ts", "ip_address", "method", "request_path", "status", "user_agent"}
	apiAuditColumnsWithoutDefault = []string{"ts", "ip_address", "method", "request_path", "status"}
	apiAuditColumnsWithDefault    = []string{"user_agent"}
	apiAuditPrimaryKeyColumns     = []string{"ts"}
	apiAuditGeneratedColumns      = []string{}
)

type (
	// APIAuditSlice is an alias for a slice of pointers to APIAudit.
	// This should almost always be used instead of []APIAudit.
	APIAuditSlice []*APIAudit
	// APIAuditHook is the signature for custom APIAudit hook methods
	APIAuditHook func(context.Context, boil.ContextExecutor, *APIAudit) error

	apiAuditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apiAuditType                 = reflect.TypeOf(&APIAudit{})
	apiAuditMapping              = queries.MakeStructMapping(apiAuditType)
	apiAuditPrimaryKeyMapping, _ = queries.BindMapping(apiAuditType, apiAuditMapping, apiAuditPrimaryKeyColumns)
	apiAuditInsertCacheMut       sync.RWMutex
	apiAuditInsertCache          = make(map[string]insertCache)
	apiAuditUpdateCacheMut       sync.RWMutex
	apiAuditUpdateCache          = make(map[string]updateCache)
	apiAuditUpsertCacheMut       sync.RWMutex
	apiAuditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var apiAuditAfterSelectMu sync.Mutex
var apiAuditAfterSelectHooks []APIAuditHook

var apiAuditBeforeInsertMu sync.Mutex
var apiAuditBeforeInsertHooks []APIAuditHook
var apiAuditAfterInsertMu sync.Mutex
var apiAuditAfterInsertHooks []APIAuditHook

var apiAuditBeforeUpdateMu sync.Mutex
var apiAuditBeforeUpdateHooks []APIAuditHook
var apiAuditAfterUpdateMu sync.Mutex
var apiAuditAfterUpdateHooks []APIAuditHook

var apiAuditBeforeDeleteMu sync.Mutex
var apiAuditBeforeDeleteHooks []APIAuditHook
var apiAuditAfterDeleteMu sync.Mutex
var apiAuditAfterDeleteHooks []APIAuditHook

var apiAuditBeforeUpsertMu sync.Mutex
var apiAuditBeforeUpsertHooks []APIAuditHook
var apiAuditAfterUpsertMu sync.Mutex
var apiAuditAfterUpsertHooks []APIAuditHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *APIAudit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *APIAudit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *APIAudit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *APIAudit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *APIAudit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *APIAudit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *APIAudit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *APIAudit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *APIAudit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range apiAuditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAPIAuditHook registers your hook function for all future operations.
func AddAPIAuditHook(hookPoint boil.HookPoint, apiAuditHook APIAuditHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		apiAuditAfterSelectMu.Lock()
		apiAuditAfterSelectHooks = append(apiAuditAfterSelectHooks, apiAuditHook)
		apiAuditAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		apiAuditBeforeInsertMu.Lock()
		apiAuditBeforeInsertHooks = append(apiAuditBeforeInsertHooks, apiAuditHook)
		apiAuditBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		apiAuditAfterInsertMu.Lock()
		apiAuditAfterInsertHooks = append(apiAuditAfterInsertHooks, apiAuditHook)
		apiAuditAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		apiAuditBeforeUpdateMu.Lock()
		apiAuditBeforeUpdateHooks = append(apiAuditBeforeUpdateHooks, apiAuditHook)
		apiAuditBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		apiAuditAfterUpdateMu.Lock()
		apiAuditAfterUpdateHooks = append(apiAuditAfterUpdateHooks, apiAuditHook)
		apiAuditAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		apiAuditBeforeDeleteMu.Lock()
		apiAuditBeforeDeleteHooks = append(apiAuditBeforeDeleteHooks, apiAuditHook)
		apiAuditBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		apiAuditAfterDeleteMu.Lock()
		apiAuditAfterDeleteHooks = append(apiAuditAfterDeleteHooks, apiAuditHook)
		apiAuditAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		apiAuditBeforeUpsertMu.Lock()
		apiAuditBeforeUpsertHooks = append(apiAuditBeforeUpsertHooks, apiAuditHook)
		apiAuditBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		apiAuditAfterUpsertMu.Lock()
		apiAuditAfterUpsertHooks = append(apiAuditAfterUpsertHooks, apiAuditHook)
		apiAuditAfterUpsertMu.Unlock()
	}
}

// One returns a single apiAudit record from the query.
func (q apiAuditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*APIAudit, error) {
	o := &APIAudit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for api_audit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all APIAudit records from the query.
func (q apiAuditQuery) All(ctx context.Context, exec boil.ContextExecutor) (APIAuditSlice, error) {
	var o []*APIAudit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to APIAudit slice")
	}

	if len(apiAuditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all APIAudit records in the query.
func (q apiAuditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count api_audit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q apiAuditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if api_audit exists")
	}

	return count > 0, nil
}

// APIAudits retrieves all the records using an executor.
func APIAudits(mods ...qm.QueryMod) apiAuditQuery {
	mods = append(mods, qm.From("\"api_audit\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"api_audit\".*"})
	}

	return apiAuditQuery{q}
}

// FindAPIAudit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAPIAudit(ctx context.Context, exec boil.ContextExecutor, tS int64, selectCols ...string) (*APIAudit, error) {
	apiAuditObj := &APIAudit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"api_audit\" where \"ts\"=$1", sel,
	)

	q := queries.Raw(query, tS)

	err := q.Bind(ctx, exec, apiAuditObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from api_audit")
	}

	if err = apiAuditObj.doAfterSelectHooks(ctx, exec); err != nil {
		return apiAuditObj, err
	}

	return apiAuditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *APIAudit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no api_audit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiAuditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	apiAuditInsertCacheMut.RLock()
	cache, cached := apiAuditInsertCache[key]
	apiAuditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			apiAuditAllColumns,
			apiAuditColumnsWithDefault,
			apiAuditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(apiAuditType, apiAuditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apiAuditType, apiAuditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"api_audit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"api_audit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into api_audit")
	}

	if !cached {
		apiAuditInsertCacheMut.Lock()
		apiAuditInsertCache[key] = cache
		apiAuditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the APIAudit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *APIAudit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	apiAuditUpdateCacheMut.RLock()
	cache, cached := apiAuditUpdateCache[key]
	apiAuditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			apiAuditAllColumns,
			apiAuditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update api_audit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"api_audit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, apiAuditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apiAuditType, apiAuditMapping, append(wl, apiAuditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update api_audit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for api_audit")
	}

	if !cached {
		apiAuditUpdateCacheMut.Lock()
		apiAuditUpdateCache[key] = cache
		apiAuditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q apiAuditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for api_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for api_audit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o APIAuditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"api_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, apiAuditPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in apiAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all apiAudit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *APIAudit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no api_audit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiAuditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apiAuditUpsertCacheMut.RLock()
	cache, cached := apiAuditUpsertCache[key]
	apiAuditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			apiAuditAllColumns,
			apiAuditColumnsWithDefault,
			apiAuditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			apiAuditAllColumns,
			apiAuditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert api_audit, could not build update column list")
		}

		ret := strmangle.SetComplement(apiAuditAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(apiAuditPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert api_audit, could not build conflict column list")
			}

			conflict = make([]string, len(apiAuditPrimaryKeyColumns))
			copy(conflict, apiAuditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"api_audit\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(apiAuditType, apiAuditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apiAuditType, apiAuditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert api_audit")
	}

	if !cached {
		apiAuditUpsertCacheMut.Lock()
		apiAuditUpsertCache[key] = cache
		apiAuditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single APIAudit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *APIAudit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no APIAudit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apiAuditPrimaryKeyMapping)
	sql := "DELETE FROM \"api_audit\" WHERE \"ts\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from api_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for api_audit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q apiAuditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no apiAuditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from api_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for api_audit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o APIAuditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(apiAuditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"api_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiAuditPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from apiAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for api_audit")
	}

	if len(apiAuditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *APIAudit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAPIAudit(ctx, exec, o.TS)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *APIAuditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := APIAuditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"api_audit\".* FROM \"api_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiAuditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in APIAuditSlice")
	}

	*o = slice

	return nil
}

// APIAuditExists checks if the APIAudit row exists.
func APIAuditExists(ctx context.Context, exec boil.ContextExecutor, tS int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"api_audit\" where \"ts\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tS)
	}
	row := exec.QueryRowContext(ctx, sql, tS)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if api_audit exists")
	}

	return exists, nil
}

// Exists checks if the APIAudit row exists.
func (o *APIAudit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return APIAuditExists(ctx, exec, o.TS)
}
